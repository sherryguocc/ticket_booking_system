from datetime import date, datetime, timedelta
from flask import (Flask, Blueprint, render_template, request, redirect, url_for, flash)
from flask_login import (UserMixin, LoginManager, login_user, login_required, logout_user, current_user)
import bcrypt
import re
from APP.main import app, login_manager
import re
import json

from .models.user_model import User
from .models.movie_model import Movie, Screening
from .models.cinema_model import Hall, ScreeningSeat
from .models.system_model import Booking, Payment,CreditCard,DebitCard,Coupon,Notification

class BookingSystem:
    def show_home():
        if current_user.is_authenticated:
            user_id = current_user.get_id
        else:
            user_id = None
        
        movieList = Movie.get_movie_list()
        return movieList, user_id
    
    def get_movie_list():
        movieList = Movie.get_movie_list()
        return movieList

    @staticmethod
    def login(username, password):
        user = User.login(username, password)
        if user:
            login_user(user)
            flash('Logged in successfully!', 'success')
            return user  # Return the User object or None
        else:
            flash('Invalid credentials. Please check your username and password.', 'error')
        
    
    @staticmethod
    def register():
        name = request.form['name']
        username = request.form['username']
        email = request.form['email']
        phone = request.form['phone']
        address = request.form['address']
        password = request.form['password']

        if not BookingSystem.is_valid_password(password):
            flash('Password must be at least 8 digits with both letters and numbers.')
            return redirect(url_for('home.register'))

        if User.check_username_exist(username):
            flash('The username has already been taken. Please try with another one!')
            return redirect(url_for('home.register'))

        user = User(username, password, name, phone, address, email)

        user.save_to_database()

        flash('Welcome to the cinema booking system!')

    # Function to validate the password
    def is_valid_password(password):
        if len(password) < 8:
            return False
        if not re.match(r'^(?=.*[A-Za-z])(?=.*\d)', password):
            return False
        return True
    
    @staticmethod
    def logout():
        User.logout()
        flash('Logged out successfully!', 'success')
        return redirect(url_for('home.home'))
    
    @staticmethod
    def register(username, password, name, email, phone, address):
        if username in User.get_all_usernames():
            return flash("username exists, please try another one.")
        else:
            # Create a User object with the provided data
            new_user = User(
                        userID=None,  # Since it will be auto-generated by the database
                        username=username,
                        password=bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()),  
                        role='customer', 
                        name=name,
                        phone=phone,
                        address=address,
                        email=email
                    )

            # Call the create_user method to save the new user to the database
            result = User.create_user(new_user)
            if result:
                return True
            else:
                False

    @staticmethod
    def search_movies(search_content):
        movies = Movie.search(search_content)
        return movies
    
    @staticmethod
    def add_movie(title, description, duration_mins, language, release_date, country, genre):
        new_movie = Movie(movieID=None, title=title, description=description, durationMins=duration_mins, language=language, releaseDate=release_date, country=country, genre=genre, status='showing')
        movie_id = Movie.add_movie(new_movie)
        return movie_id

    @staticmethod
    def add_screening(movie_id, screening_date, start_time, hallID, price):
        movie = Movie.get_movie_by_id(movie_id)
        # Check for valid data and create a Screening object
        if screening_date and start_time and hallID:
            # Calculate end_time based on start_time and movie duration
            duration_minutes = movie.durationMins
            start_time_datetime = datetime.strptime(start_time, '%H:%M')
            end_time = start_time_datetime + timedelta(minutes=duration_minutes)
            end_time_str = end_time.strftime('%H:%M')

            # Check if the hall is available
            if not Screening.is_hall_available(hallID, screening_date, start_time, end_time_str):
                flash('Hall is already booked for the selected time period.', 'error')
                return  # Return early if the hall is not available

            new_screening = Screening(None, movie_id, screening_date, start_time, end_time_str, hallID, price,'showing')
            screening_id = Screening.add_screening(new_screening)

            if screening_id:
                hall_id=new_screening.hallID
                add_seats = ScreeningSeat.add_seats(screening_id, hall_id)
                if add_seats:
                    flash('Screening added successfully!', 'success')
                else:
                    return flash('Cannot add seats for this screeing.')
            else:
                return flash('Cannot add screening.')
        else:
            return flash('not enough input.')
        
    @staticmethod
    def screening_list_display(movie_id):
        screeninglist = Screening.get_screening_list(movie_id)
        movie = Movie.get_movie_by_id(movie_id)
        movie_id = movie.movieID
        movie_name = movie.title

        for screening in screeninglist:
            screening.hallID = Hall.get_name_by_id(screening.hallID)
            screening.movieInfo = (movie_id, movie_name)

        return screeninglist
    
    @staticmethod
    def get_screening(screening_id):
        screening = Screening.get_screening_by_id(screening_id)
        return screening
    
    @staticmethod
    def get_screening_seats(screening_id):
        screening = Screening.get_screening_by_id(screening_id)
        seatList=Hall.get_seatList(screening.hallID)
        return seatList
    
    @staticmethod
    def get_booked_seats(screening_id):
        booked_seats = ScreeningSeat.get_booked_seats(screening_id)
        return booked_seats
    
    @staticmethod
    def get_reserved_seats(screening_id):
        reserved_seats = ScreeningSeat.get_reserved_seats(screening_id)
        return reserved_seats
    
    @staticmethod
    def get_screening_seats(screening_id):
        screening_seats = ScreeningSeat.get_seats(screening_id)
        return screening_seats
    
    @staticmethod
    def get_screening_seats_row(screening_id):
        seats= ScreeningSeat.get_max_rows_and_columns(screening_id)
        row= seats[0]
        return row
    
    @staticmethod
    def get_screening_seats_column(screening_id):
        seats= ScreeningSeat.get_max_rows_and_columns(screening_id)
        column = seats[1]
        return column
    
    @staticmethod
    def count_seats(selected_seats):
        number_of_seats = sum(1 for seat in selected_seats)
        print("count_seats function in controller:", number_of_seats)
        return number_of_seats
    
    @staticmethod
    def total_amount(selected_seats, screening_id):
        screening = Screening.get_screening_by_id(screening_id)
        price = screening.price
        total_amount = BookingSystem.count_seats(selected_seats) * price
        print("total_amount function in controller: ",total_amount)
        return total_amount
    
    @staticmethod
    def discount_amount(amount, coupon_code):
        if coupon_code:
            discount = Coupon.get_discount_by_code(coupon_code)
            print("discount in controller: ",discount)
            if discount:
                discount_amount = amount * discount
                print("discount amount in controller: ",discount_amount)
                return discount_amount
            else:
                flash('coupon has expired or does not exist.')
                return amount
        else:
            return amount
    
    @staticmethod
    def get_movie_name(screening_id):
        screening = Screening.get_screening_by_id(screening_id)
        movie_id = screening.movieID
        movie = Movie.get_movie_by_id(movie_id)
        return movie.title
    
    @staticmethod
    def get_movie_name_by_movie_id(movie_id):
        movie = Movie.get_movie_by_id(movie_id)
        return movie.title
    
    @staticmethod
    def add_creditcard_return_id(cardNumber, cardType, expiryDate, nameOnCard, securityNumber):
        current_date = datetime.now()
        expiryDate = datetime.strptime(expiryDate, "%m/%Y")
        if expiryDate is not None and expiryDate < current_date:
            flash("Credit card is expired, please change card.")
            return False
        else:
            new_creditcard = CreditCard(None, cardNumber, cardType, expiryDate, nameOnCard, securityNumber)
            creditcard_id = CreditCard.add_creditcard(new_creditcard)
            return creditcard_id
    
    @staticmethod
    def add_debitcard_return_id(cardNumber, bankName, nameOnCard):
        new_debitcard = DebitCard(None, cardNumber, bankName, nameOnCard)
        debitcard_id = DebitCard.add_debitcard(new_debitcard)
        return debitcard_id 

    @staticmethod
    def add_payment_return_id(booking_id, date, couponCode, creditCardID, debitCardID):
        user_id = current_user.get_id()
        booking = Booking.find_booking_by_id(booking_id)
        amount = booking.amount
        print("booking amount:",booking.amount)
        new_payment = Payment(paymentID=None, amount=amount, date=date, couponID=None, creditCardID=creditCardID, debitCardID=debitCardID, status='received')
        coupon_id = Coupon.get_id_by_code(couponCode)
        if coupon_id:
            discount = Coupon.get_discount_by_code(couponCode)
            if discount :
                new_payment.couponID = coupon_id
                new_payment.amount = amount * discount
                new_payment_id = Payment.add_payment(new_payment)

                if new_payment_id:
                    Notification.send_payment_notes(user_id)
                    return new_payment_id
                else:
                    return None
            else:
                new_payment_id = Payment.add_payment(new_payment)
                flash("coupon code is expired.Paid without discount.")
                if new_payment_id:
                    Notification.send_payment_notes(user_id)
                    return new_payment_id
                else:
                    return None
                
        else:
            new_payment_id = Payment.add_payment(new_payment)
            if new_payment_id:
                Notification.send_payment_notes(user_id)
                return new_payment_id
            else:
                return None
    
    @staticmethod
    def display_coupon_list():
        coupon_list = Coupon.get_coupon_list()
        return coupon_list
    
    @staticmethod
    def add_coupon(expiryDate,discount):
        print("add coupon method is attributed")
        current_date=datetime.now()
        expiry_date = datetime.strptime(expiryDate, '%Y-%m-%d')
        print("current_date:",current_date)
        if expiry_date > current_date:
            print("expiryDate is valid")
            new_coupon = Coupon(couponID=None, expiryDate=expiry_date, discount=discount, couponCode=None)
            print("new_coupon:",new_coupon)
            coupon_id = Coupon.add_coupon(new_coupon)
            print("coupon_id in controller:",coupon_id)
            if coupon_id:
                return coupon_id
            else:
                return None
        else:
            flash("expiryDate can not be early than the current date.")
            return None

    @staticmethod
    def add_booking(user_id, screening_id, selected_seats):
        number_of_seat = BookingSystem.count_seats(selected_seats)
        booking_date = datetime.now()
        amount = BookingSystem.total_amount(selected_seats, screening_id)
        selected_seats_json = json.dumps(selected_seats)
        new_booking = Booking(
                        bookingID=None,
                        userID=user_id,
                        numberOfSeat=number_of_seat,
                        bookingDate=booking_date,
                        screeningID=screening_id,
                        seatList=selected_seats_json,
                        amount=amount,
                        paymentID=None,
                        status='pending'
                    )
        success = Booking.add_booking(new_booking)
        if success:
            for seat in selected_seats:
                ScreeningSeat.reserve_seat(screening_id,seat)
            Notification.send_booking_notes(user_id)
            return new_booking
        else:
            return None

    @staticmethod
    def get_booking_list_with_details(user_id):
        bookingList = Booking.get_booking_list(user_id)
        booking_details_list = []

        for booking in bookingList:
            screening = BookingSystem.get_screening(booking['screeningID'])
            payment = Payment.get_payment_by_id(booking['paymentID'])
            hall_id = screening.hallID
            hall_name = Hall.get_name_by_id(hall_id)

            coupon = 'No'
            if payment:
                coupon_id = payment[3]
                if coupon_id:
                    coupon = 'Yes'

            amount = None
            if payment:
                amount = payment[1]

            booking_details = {
                'booking_id': booking['bookingID'],
                'booking_date': booking['bookingDate'],
                'number_of_seats': booking['numberOfSeat'],
                'payment_info': {
                    'coupon': coupon,
                    'amount': amount,
                },
                'seat_list': booking['seatList'],
                'amount': booking['amount'],
                'status': booking['status'],
                'screening_info': {
                    'date': screening.date,
                    'hall_name': hall_name,
                    'price': screening.price,
                    'start_time': screening.startTime,
                    'end_time': screening.endTime
                },
                'movie_name': BookingSystem.get_movie_name(booking['screeningID']),
            }
            booking_details_list.append(booking_details)

        return booking_details_list

    @staticmethod
    def cancel_booking(booking_id):
        user_id = current_user.get_id()
        booking = Booking.find_booking_by_id(booking_id)

        for seat in booking.seatList:
            ScreeningSeat.cancel_seat(booking.screeningID,seat)
        if not booking:
            return flash("Booking not found. Cannot cancel.")
        if booking.paymentID:# if this booking is paid, need to refund payment first
            result = Payment.cancel_and_refund(booking.paymentID)
            Notification.send_cancel_notes_with_pay(user_id)
            if result:
                Booking.cancel_booking(booking_id)
                flash("Booking cancelled and payment refund successfully.")
            else:
                flash("Failed to process refund. Booking not cancelled.")
        else:
            Booking.cancel_booking(booking_id)
            ScreeningSeat.cancel_seat(booking.screeningID,seat)
            Notification.send_cancel_notes_without_pay(user_id)
            flash("Booking cancelled successfully.")

    @staticmethod
    def pay_for_booking(booking_id, payment_id):
        booking = Booking.find_booking_by_id(booking_id)
        screening_id = booking.screeningID
        if booking: 
            result= Booking.update_paid_booking(booking_id, payment_id)
            if result:
                for seat in booking.seatList:
                    result=ScreeningSeat.book_seat(screening_id, seat)
                    if result:
                        return flash("Booking paid successfully!")
            else:
                return flash("could not add booking payment error")
        else:
            return flash("error:booking not found.")

    @staticmethod
    def cancel_screening(screening_id):
        booking_id_list = Booking.find_booking_ids_by_screening_id(screening_id)
        if booking_id_list:# if there are bookings under this screening
            for booking_id in booking_id_list:
                BookingSystem.cancel_booking(booking_id)
                for user_id in Booking.find_user_ids_by_booking_id(booking_id):
                    Notification.screening_cancel_notes(user_id)

        success = Screening.cancel_screening(screening_id)

        if success:
            # Delete the screening seats for this screening
            ScreeningSeat.delete_screeningseats(screening_id)
            flash("Screening and associated bookings canceled successfully.")
        else:
            flash("Failed to cancel the screening.")
            
    @staticmethod
    def send_movie_cancel_notes(movie_id):
        screening_list=Screening.get_screening_list(movie_id)
        for screening in screening_list:
            booking_ids = Booking.find_booking_ids_by_screening_id(screening.screeningID)
            for booking_id in booking_ids:
                user_id = Booking.find_user_ids_by_booking_id(booking_id)
                Notification.movie_cancel_notes(user_id)

    
    @staticmethod
    def cancel_movie(movie_id):
        screening_list = Screening.get_screening_list(movie_id)
        if screening_list:  # if there are screenings with this movie
            for screening in screening_list:
                BookingSystem.cancel_screening(screening.screeningID)

        Movie.cancel_movie(movie_id)
        BookingSystem.send_movie_cancel_notes(movie_id)
        flash("Movie and associated screenings cancelled successfully!")

        return True
    
    @staticmethod
    def get_notifications(user_id):
        notes_list = Notification.get_notification_list(user_id)
        return notes_list
    


